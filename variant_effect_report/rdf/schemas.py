"""
ShEx schemas for validating variant effect RDF data.
"""


def get_shex_schema():
    """
    Return the ShEx schema for validating variant effect RDF data.
    
    The ShEx (Shape Expressions) schema defines the expected structure of the RDF data
    generated by the variant effect analyzer. It can be used with ShEx validation tools
    to verify that the RDF output conforms to the expected structure and semantics.
    
    The schema validates the following key components:
    
    1. Report structure with variants, features, and effects
    2. Variant information including type, length change, and position
    3. Feature information with proper genomic locations
    4. Effect information including type, affected feature, and zygosity
    5. Sample and haplotype information for complex genetic analyses
    6. Compound heterozygous effect representation
    
    Returns:
        A string containing the ShEx schema
    """
    return """PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX faldo: <http://biohackathon.org/resource/faldo#>
PREFIX so: <http://purl.obolibrary.org/obo/SO_>
PREFIX obo: <http://purl.obolibrary.org/obo/>
PREFIX dc: <http://purl.org/dc/terms/>
PREFIX sio: <http://semanticscience.org/resource/>
PREFIX gff: <http://www.sequenceontology.org/gff3/1.0/>

# Define base URIs for our namespaces
PREFIX base: <http://example.org/genomics/>
PREFIX variant: <http://example.org/genomics/variant/>
PREFIX sample: <http://example.org/genomics/sample/>
PREFIX feature: <http://example.org/genomics/feature/>
PREFIX effect: <http://example.org/genomics/effect/>
PREFIX position: <http://example.org/genomics/position/>

# Define the report shape
<ReportShape> {
  rdf:type [sio:SequenceVariantAnalysisReport] ;
  rdfs:label xsd:string? ;
  dc:created xsd:dateTime ;
  variant:hasVariant @<VariantShape>+ ;
  feature:hasFeature @<FeatureShape>+ ;
  effect:hasEffect @<EffectShape>* ;
  sio:refersTo @<SampleShape>*
}

# Define the variant shape
<VariantShape> {
  rdf:type [so:sequence_variant] ;
  rdfs:label xsd:string ;
  variant:variantType IRI ;
  variant:lengthChange xsd:integer ;
  faldo:location @<RegionShape>? ;
  variant:affectsSegment @<SegmentShape>*
}

# Define the feature shape
<FeatureShape> {
  rdf:type IRI ;  # Any GFF3 feature type
  rdfs:label xsd:string ;
  faldo:location @<RegionShape> ;
  faldo:strand [faldo:ForwardStrand faldo:ReverseStrand faldo:BothStrand]?
}

# Define the effect shape
<EffectShape> {
  rdf:type [effect:VariantEffect] ;
  effect:effectType IRI ;
  effect:affectsFeature @<FeatureShape> ;
  variant:zygosity xsd:string? ;
  effect:inSample @<SampleShape>? ;
  effect:inHaplotype @<HaplotypeShape>* ;
  dc:description xsd:string? ;
  variant:referenceSequence xsd:string? ;
  variant:alternateSequence xsd:string? ;
  effect:causedBy @<VariantShape>* ;
  effect:variantInHaplotype @<HaplotypeVariantAssociationShape>*
}

# Define the sample shape
<SampleShape> {
  rdf:type [sio:Sample] ;
  rdfs:label xsd:string ;
  base:hasHaplotype @<HaplotypeShape>*
}

# Define the haplotype shape
<HaplotypeShape> {
  rdf:type [base:Haplotype] ;
  rdfs:label xsd:string
}

# Define the region shape (for genomic locations)
<RegionShape> {
  rdf:type [faldo:Region] ;
  faldo:begin @<PositionShape> ;
  faldo:end @<PositionShape>
}

# Define the position shape
<PositionShape> {
  rdf:type [faldo:ExactPosition] ;
  faldo:position xsd:integer
}

# Define the segment shape
<SegmentShape> {
  rdf:type [base:Segment] ;
  rdfs:label xsd:string
}

# Define the haplotype-variant association shape
<HaplotypeVariantAssociationShape> {
  rdf:type [effect:HaplotypeVariantAssociation] ;
  effect:haplotype @<HaplotypeShape> ;
  effect:variant @<VariantShape>
}
"""
